From 851085e5fbf9ea6c10663194052752feab040e2b Mon Sep 17 00:00:00 2001
Date: Wed, 24 Jan 2018 16:53:23 +0800
Subject: [PATCH 1/7] modify for adapt iot lora sdk

---
 lora_pkt_fwd/src/lora_pkt_fwd.c | 56 ++++++++++++++++++++++++++++++++++++-----
 1 file changed, 50 insertions(+), 6 deletions(-)
 mode change 100644 => 100755 lora_pkt_fwd/src/lora_pkt_fwd.c

diff --git a/lora_pkt_fwd/src/lora_pkt_fwd.c b/lora_pkt_fwd/src/lora_pkt_fwd.c
old mode 100644
new mode 100755
index 801f28d..c449a6f
--- a/lora_pkt_fwd/src/lora_pkt_fwd.c
+++ b/lora_pkt_fwd/src/lora_pkt_fwd.c
@@ -233,6 +233,11 @@ static struct lgw_tx_gain_lut_s txlut; /* TX gain table */
 static uint32_t tx_freq_min[LGW_RF_CHAIN_NB]; /* lowest frequency supported by TX chain */
 static uint32_t tx_freq_max[LGW_RF_CHAIN_NB]; /* highest frequency supported by TX chain */
 
+//Begin add for adapt iot lora sdk
+static uint8_t push_ack_token_h; 
+static uint8_t push_ack_token_l;
+//End
+
 /* -------------------------------------------------------------------------- */
 /* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
 
@@ -889,7 +894,7 @@ static int send_tx_ack(uint8_t token_h, uint8_t token_l, enum jit_error_e error)
     int buff_index;
 
     /* reset buffer */
-    memset(&buff_ack, 0, sizeof buff_ack);
+    memset(buff_ack, 0, sizeof buff_ack);
 
     /* Prepare downlink feedback to be sent to server */
     buff_ack[0] = PROTOCOL_VERSION;
@@ -967,7 +972,9 @@ static int send_tx_ack(uint8_t token_h, uint8_t token_l, enum jit_error_e error)
     buff_ack[buff_index] = 0; /* add string terminator, for safety */
 
     /* send datagram to server */
-    return send(sock_down, (void *)buff_ack, buff_index, 0);
+    //Begin add for adapt iot lora sdk
+    return send(sock_up, (void *)buff_ack, buff_index, 0);
+    //End
 }
 
 /* -------------------------------------------------------------------------- */
@@ -1182,12 +1189,24 @@ int main(void)
         exit(EXIT_FAILURE);
     }
 
+    //Begin add for adapt iot lora sdk
+    #if 0
     /* connect so we can send/receive packet with the server only */
     i = connect(sock_down, q->ai_addr, q->ai_addrlen);
     if (i != 0) {
         MSG("ERROR: [down] connect returned %s\n", strerror(errno));
         exit(EXIT_FAILURE);
     }
+    #else
+    /* bind so we can receive packet with the server only */
+    i = bind(sock_down, q->ai_addr, q->ai_addrlen);
+    if (i != 0) {
+        MSG("ERROR: [down] bind returned %s\n", strerror(errno));
+        exit(EXIT_FAILURE);
+    }
+    #endif
+    //End
+    
     freeaddrinfo(result);
 
     /* starting the concentrator */
@@ -1852,7 +1871,10 @@ void thread_up(void) {
         pthread_mutex_lock(&mx_meas_up);
         meas_up_dgram_sent += 1;
         meas_up_network_byte += buff_index;
-
+        //Begin add for adapt iot lora sdk
+        push_ack_token_h = token_h;
+        push_ack_token_l = token_l;
+        #if 0
         /* wait for acknowledge (in 2 times, to catch extra packets) */
         for (i=0; i<2; ++i) {
             j = recv(sock_up, (void *)buff_ack, sizeof buff_ack, 0);
@@ -1875,6 +1897,8 @@ void thread_up(void) {
                 break;
             }
         }
+        #endif
+        //End
         pthread_mutex_unlock(&mx_meas_up);
     }
     MSG("\nINFO: End of upstream thread\n");
@@ -1896,7 +1920,7 @@ void thread_down(void) {
 
     /* data buffers */
     uint8_t buff_down[1000]; /* buffer to receive downstream packets */
-    uint8_t buff_req[12]; /* buffer to compose pull requests */
+    uint8_t buff_req[256]; /* buffer to compose pull requests */
     int msg_len;
 
     /* protocol variables */
@@ -1912,6 +1936,8 @@ void thread_down(void) {
     short x0, x1;
     uint64_t x2;
     double x3, x4;
+    int buff_index;
+    int j;
 
     /* variables to send on GPS timestamp */
     struct tref local_ref; /* time reference used for GPS <-> timestamp conversion */
@@ -2069,9 +2095,12 @@ void thread_down(void) {
         token_l = (uint8_t)rand(); /* random token */
         buff_req[1] = token_h;
         buff_req[2] = token_l;
+        buff_index = 12;
 
         /* send PULL request and record time */
-        send(sock_down, (void *)buff_req, sizeof buff_req, 0);
+        //Begin add for adapt iot lora sdk
+        send(sock_up, (void *)buff_req, buff_index, 0);
+        //End
         clock_gettime(CLOCK_MONOTONIC, &send_time);
         pthread_mutex_lock(&mx_meas_dw);
         meas_dw_pull_sent += 1;
@@ -2084,6 +2113,7 @@ void thread_down(void) {
         while ((int)difftimespec(recv_time, send_time) < keepalive_time) {
 
             /* try to receive a datagram */
+            memset(buff_down, 0x0, sizeof(buff_down));
             msg_len = recv(sock_down, (void *)buff_down, (sizeof buff_down)-1, 0);
             clock_gettime(CLOCK_MONOTONIC, &recv_time);
 
@@ -2198,7 +2228,9 @@ void thread_down(void) {
             }
 
             /* if the datagram does not respect protocol, just ignore it */
-            if ((msg_len < 4) || (buff_down[0] != PROTOCOL_VERSION) || ((buff_down[3] != PKT_PULL_RESP) && (buff_down[3] != PKT_PULL_ACK))) {
+            //Begin add for adapt iot lora sdk
+            if ((msg_len < 4) || (buff_down[0] != PROTOCOL_VERSION) || ((buff_down[3] != PKT_PULL_RESP) && (buff_down[3] != PKT_PULL_ACK) && (buff_down[3] != PKT_PUSH_ACK))) {
+            //End
                 MSG("WARNING: [down] ignoring invalid packet len=%d, protocol_version=%d, id=%d\n",
                         msg_len, buff_down[0], buff_down[3]);
                 continue;
@@ -2221,7 +2253,19 @@ void thread_down(void) {
                     MSG("INFO: [down] received out-of-sync ACK\n");
                 }
                 continue;
+            //Begin add for adapt iot lora sdk
+            } else if (buff_down[3] == PKT_PUSH_ACK) {
+                if ((buff_down[1] == push_ack_token_h) && (buff_down[2] == push_ack_token_l)) {
+                    MSG("INFO: [down] PUSH_ACK received\n");
+                    pthread_mutex_lock(&mx_meas_up);
+                    meas_up_ack_rcv += 1;
+                    pthread_mutex_unlock(&mx_meas_up);
+                } else {
+                    MSG("WARNING: [down] ignored out-of sync ACK packet\n");
+                }
+                continue;
             }
+            //End
 
             /* the datagram is a PULL_RESP */
             buff_down[msg_len] = 0; /* add string terminator, just to be safe */
-- 
1.8.3.1

